var path = require('path');

module.exports.index = function (req,res) {
    res.render('page1',{mainurl:'',urlarray: []})
}

module.exports.indexPost = function (req,res) {
    console.log(req.body)
   var count = Object.keys(req.body).length
   var mainurl=req.body.mainurl;
   var urlarray = [];
   for (let i = 1; i < count; i++) {
       urlarray.push(req.body[Object.keys(req.body)[i]])
      //  console.log(Object.keys(req.body)[i])
    //  console.log("Deger"+ req.body[Object.keys(req.body)[i]])
   }
   console.log(urlarray)

   
    res.render('page1',{urlarray:urlarray,mainurl:mainurl})
   

}

var path = require('path');
var ResultFrequency = [];    
var wordFrequency = [];
var Text = "";
const util = require('util')
const axios = require('axios'),

  jsdom = require('jsdom'),
  { JSDOM } = jsdom;
module.exports.Frequency = function (req,res) {
    res.render('page1Frequency',{mainurl:'',wordfrequency: []})
}
module.exports.FrequencyPost = function (req,res) {
    async function printfrequency() {
        await findfrequency(req.body.mainurl);
        res.render('page1Frequency',{mainurl:req.body.mainurl,wordfrequency:ResultFrequency})
    }
    printfrequency()
}
async function findfrequency(url) {
  
  async function AxiosConnect() {
    // create a promise for the axios request
    const promise = axios.get(url)

    // using .then, create a new promise which extracts the data
    const dataPromise = promise.then((response) => response.data)

    // return it

    return dataPromise

  }
  let axiosconnected = AxiosConnect()
  //console.log(userToken) // Promise { <pending> }
   await axiosconnected.then(function (result) {
    // console.log(result) // "Some User token"
     getNodes(result);

  })
async function getNodes(html){
//  console.log(html);
    Text = "";
  const TextData = [],
    dom = new JSDOM(html),
    
    news = dom.window.document.querySelectorAll('p');
  news.forEach(item => {
    Text += item.textContent.toLowerCase();
    TextData.push({
      text: item.textContent,
    })
  });
  console.log(Text);

  var result = Text.split(/['\t', -.'\n']+/);
  console.log(util.inspect(result, { maxArrayLength: null }))
  for (var i = 0; i < result.length; i++) {
    wordFrequency[i] = [];
    for (var j = 0; j < 2; j++) {
      wordFrequency[i][j] = undefined;
    }
  }

  wordFrequency[0][0]=result[0];
  wordFrequency[0][1]=1;
 
  async function AddStopWords(){
    try {
      var data = fs.readFileSync('stop_words_turkish.txt', 'utf8');
        
      return data.split(/[''\n\r']+/);
    } catch(e) {
      console.log('Error:', e.stack);
      return null;
    }
  }    
  
  var stopwords = await AddStopWords();
  console.log(stopwords.length);

  for (let i = 1; i < result.length; i++) {
    var isexist= -1 ;
    for (let j = 0; j < wordFrequency.length; j++) {
       if(result[i] == wordFrequency[j][0]){
      
            wordFrequency[j][1]++;
            isexist=j;
            break;
       }
    }


    if(isexist== -1) {
      if(!stopwords.includes(result[i])){
        for(let j = 0; j < wordFrequency.length; j++){
          if(wordFrequency[j][0]==undefined){
            wordFrequency[j][0]=result[i];
            wordFrequency[j][1]=1;
            break;
          }
        }
      }
    
    }
  }

for (let j = 0; j < wordFrequency.length-1; j++) {
  for (let i = 0; i < wordFrequency.length-i; i++) {    
    if(wordFrequency[i][1]<wordFrequency[i+1][1]){
      let temp = wordFrequency[i+1];
      wordFrequency[i+1]= wordFrequency[i];
      wordFrequency[i] = temp;
    }
} 
}

  for (let index = 0; index < wordFrequency.length; index++) {
    //console.log(wordFrequency[index][0],wordFrequency[index][1])
    if(wordFrequency[index][1]!=undefined){
        ResultFrequency[index]=wordFrequency[index];
      
    }
}

}
console.log(ResultFrequency)
  }

var path = require('path');
const util = require('util')
const axios = require('axios');
var wordFrequency = [];
var ResultFrequency = [];   
var keyword = [];
  jsdom = require('jsdom'),
  { JSDOM } = jsdom;

  async function FindKeywords(url) {
    async function AxiosConnect() {
      // create a promise for the axios request
      const promise = axios.get(url)
  
      // using .then, create a new promise which extracts the data
      const dataPromise = promise.then((response) => response.data)
  
      // return it
  
      return dataPromise
  
    }
    let axiosconnected = AxiosConnect()
    //console.log(userToken) // Promise { <pending> }
     await axiosconnected.then(function (result) {
      // console.log(result) // "Some User token"
       getNodes(result);
  
    })
  async function getNodes(html){
      Text = "";
    const TextData = [],
      dom = new JSDOM(html),
      news = dom.window.document.querySelectorAll('p');
    news.forEach(item => {
      Text += item.textContent.toLowerCase();
      TextData.push({
        text: item.textContent,
      })
    });
    //console.log(Text);
  
    var result = Text.split(/['\t', -.'\n']+/);
    //console.log(result.length)
  
     wordFrequency = [];
    for (var i = 0; i < result.length; i++) {
      wordFrequency[i] = [];
      for (var j = 0; j < 2; j++) {
        wordFrequency[i][j] = undefined;
      }
    }
  
    wordFrequency[0][0]=result[0];
    wordFrequency[0][1]=1;
   
    async function AddStopWords(){
      try {
        var data = fs.readFileSync('stop_words_turkish.txt', 'utf8');
          
        return data.split(/[''\n\r']+/);
      } catch(e) {
        console.log('Error:', e.stack);
        return null;
      }
    }    
    
    var stopwords = await AddStopWords();
    console.log(stopwords.length);
    for (let i = 1; i < result.length; i++) {
      var isexist= -1 ;
      for (let j = 0; j < wordFrequency.length; j++) {
         if(result[i] == wordFrequency[j][0]){
        
              wordFrequency[j][1]++;
              isexist=j;
              break;
         }
      }
  
  
      if(isexist== -1) {
        if(!stopwords.includes(result[i])){
          for(let j = 0; j < wordFrequency.length; j++){
            if(wordFrequency[j][0]==undefined){
              wordFrequency[j][0]=result[i];
              wordFrequency[j][1]=1;
              break;
            }
          }
        }
      
      }
    }
  
  for (let j = 0; j < wordFrequency.length-1; j++) {
    for (let i = 0; i < wordFrequency.length-i; i++) {    
      if(wordFrequency[i][1]<wordFrequency[i+1][1]){
        let temp = wordFrequency[i+1];
        wordFrequency[i+1]= wordFrequency[i];
        wordFrequency[i] = temp;
      }
  } 
  }
    for (let index = 0; index < wordFrequency.length; index++) {
      //console.log(wordFrequency[index][0],wordFrequency[index][1])
      if(wordFrequency[index][1]!=undefined){
          ResultFrequency[index]=wordFrequency[index];
        
      }
  }

  var number =result.length*(2/100); 
  var roundedNumber = Math.round(number);
  
   keyword = [];
  for (let i = 0; i < roundedNumber; i++) {
    keyword[i] = [];
    keyword[i][0]=ResultFrequency[i][0];
    keyword[i][1]=ResultFrequency[i][1];
  }
  
  }
  //console.log(ResultFrequency)
   console.log(keyword)

    }

module.exports.Keywords = function (req,res) {
    res.render('page2Keywords',{mainurl:'',keyword: []})
}
 module.exports.KeywordsPost = function (req,res) {
     async function printKeywords() {
       await FindKeywords(req.body.mainurl);
       res.render('page2Keywords',{keyword:keyword,mainurl:req.body.mainurl})
     }
    printKeywords();
    console.log("yazdirdik")


 }
var path = require('path');
const util = require('util')
const axios = require('axios');
var LastScore = 0;
var wordFrequency = [];
var allTerms=[];
var wordFreuqency1 = [];
var intersection = 0;
var wordFreuqency2 = [];
var allWordCount1 = 0;
var allWordCount2 = 0;
var ResultFrequency = [];   
var keyword = [];
var Keywords1 = []
var Keywords2 = []
  jsdom = require('jsdom'),
  { JSDOM } = jsdom;

  
module.exports.Score = function (req,res) {
  res.render('page3Score',{Keywords1:[],Keywords2:[],mainurl:"",secondurl:"",LastScore:""})
}
 module.exports.ScorePost = function (req,res) {
     async function printKeywords() {
       mainurl=req.body.mainurl;
       secondurl=req.body.secondurl;
       await Control(req.body.mainurl,req.body.secondurl);
       res.render('page3Score',{Keywords1:Keywords1,Keywords2:Keywords2,mainurl:req.body.mainurl,secondurl:req.body.secondurl,LastScore:LastScore})
     }
    printKeywords();
    console.log("yazdirdik")
 }

  function CalculateScore(url) {
 
 const getNodes = html => {
   const TextData = [],
     dom = new JSDOM(html),
     news = dom.window.document.querySelectorAll('p');
   news.forEach(item => {
     Text += item.textContent.toLowerCase();
     TextData.push({
       text: item.textContent,
     })
   });
 
   var result = Text.split(/['\t', -.'\n']+/);
   //console.log(result.length)
   if(url==mainurl){
    allWordCount1=result.length;
   }

   else if(url==secondurl){
    allWordCount2=result.length;
   }
  
    wordFrequency = []
   for (var i = 0; i < result.length; i++) {
     wordFrequency[i] = [];
     for (var j = 0; j < 2; j++) {
       wordFrequency[i][j] = undefined;
     }
   }
 
   wordFrequency[0][0]=result[0];
   wordFrequency[0][1]=1;
   
   async function AddStopWords(){
    try {
      var data = fs.readFileSync('stop_words_turkish.txt', 'utf8');
        
      return data.split(/[''\n\r']+/);
    } catch(e) {
      console.log('Error:', e.stack);
      return null;
    }
  }    
  
  var stopwords = await AddStopWords();
  console.log(stopwords.length);
 
   for (let i = 1; i < result.length; i++) {
     var isexist= -1 ;
     for (let j = 0; j < wordFrequency.length; j++) {
        if(result[i] == wordFrequency[j][0]){
       
             wordFrequency[j][1]++;
             isexist=j;
             break;
        }
     }
 
 
     if(isexist== -1) {
       if(!stopwords.includes(result[i])){
         for(let j = 0; j < wordFrequency.length; j++){
           if(wordFrequency[j][0]==undefined){
             wordFrequency[j][0]=result[i];
             wordFrequency[j][1]=1;
             break;
           }
         }
       }
     
     }
   }
 
 for (let j = 0; j < wordFrequency.length-1; j++) {
   for (let i = 0; i < wordFrequency.length-i; i++) {    
     if(wordFrequency[i][1]<wordFrequency[i+1][1]){
       let temp = wordFrequency[i+1];
       wordFrequency[i+1]= wordFrequency[i];
       wordFrequency[i] = temp;
     }
 } 
 }

 if(url==mainurl){
  wordFreuqency1=wordFrequency;
 }

 else if(url==secondurl){
  wordFreuqency2=wordFrequency;
 }

 
   var number =result.length*(2/100);
 var roundedNumber = Math.round(number);
 
 let keyword = [];
 for (let i = 0; i < roundedNumber; i++) {
   keyword[i] = [];
   keyword[i][0]=wordFrequency[i][0];
   keyword[i][1]=wordFrequency[i][1];
 }


 
 //console.log(keyword);
   return keyword;
 }
 let keywords = [] ;
    
  function axiosTest() {
    // create a promise for the axios request
    const promise = axios.get(url)
 
    // using .then, create a new promise which extracts the data
    const dataPromise = promise.then((response) => response.data)
 
    // return it
    
    return dataPromise
 
 }
 
 // now we can use that data from the outside!
 
 var Text = "";
 
 //console.log(keywords)
 
 
 let userToken =axiosTest()
 //console.log(userToken) // Promise { <pending> }
 
 keywords=userToken.then(function(result) {
   // console.log(result) // "Some User token"
    result=getNodes(result);
    return result 
 })
 
 return keywords
 
   }

  async function Control(mainurl,secondurl) {
   Keywords1=await CalculateScore(mainurl);
  
   Keywords2=await CalculateScore(secondurl);
 
   let score=100;
   let allfrequency=0;
 
   for (let j = 0; j < Keywords2.length; j++) {
    allfrequency+=Keywords2[j][1]
   }


  
   for (let i = 0; i < Keywords1.length; i++) {
      for (let j = 0; j < wordFrequency.length; j++) {
          if(Keywords1[i][0]==wordFrequency[j][0]){

           // score+=(Keywords1[i][1]*wordFrequency[j][1]);

          }
        
    }
    
   }

   
  //Cosine Similatiry
   allTerms=[];

  for (let i = 0; i < Keywords1.length; i++) {
    let word=Keywords1[i][0];
    let freq=Keywords1[i][1];
    let newword=[];
    newword[0]=word;
    newword[1]=freq;
    allTerms.push(newword)
  }
  var termexist=0;
  for (let i = 0; i < Keywords2.length; i++) {
    termexist=0;
    for (let j = 0; j < allTerms.length; j++) {
       if(allTerms[j][0]==Keywords2[i][0]){
         termexist=1;
       }
     
    }

    if(!termexist){
      let word=Keywords2[i][0];
      let freq=Keywords2[i][1];
      let newword=[];
      newword[0]=word;
      newword[1]=freq;
    allTerms.push(newword)
    }

  }

  for (let x = 0; x < allTerms.length; x++) {
   allTerms[x][1]=0;
  }
  
 
  //console.log(allTerms)
  //console.log("Keywords dizisi 111:"+Keywords1)
  var vecKeywords1=[];
  var vecKeywords2=[];
  for (let i = 0; i < allTerms.length; i++) {
    let word=allTerms[i][0];
    let freq=allTerms[i][1];
    let newword=[];
    newword[0]=word;
    newword[1]=freq;
   vecKeywords1.push(newword);
  }
  for (let i = 0; i < allTerms.length; i++) {
    let word=allTerms[i][0];
    let freq=allTerms[i][1];
    let newword=[];
    newword[0]=word;
    newword[1]=freq;
    vecKeywords2.push(newword);
  }
 
  for (let i = 0; i < vecKeywords1.length; i++) {
    for (let j = 0; j < Keywords1.length; j++) {
      if(vecKeywords1[i][0]==Keywords1[j][0]){
        vecKeywords1[i][1]=Keywords1[j][1];
      }

    }
    
  }
  
  for (let i = 0; i < vecKeywords2.length; i++) {
    for (let j = 0; j < Keywords2.length; j++) {
      if(vecKeywords2[i][0]==Keywords2[j][0]){
        vecKeywords2[i][1]=Keywords2[j][1];
      }

    }
  }

  console.log(vecKeywords1);
  console.log(vecKeywords2);
  
  var dot = 0 ; // 
  
  for (let i = 0; i < vecKeywords1.length; i++) {
    dot+=vecKeywords1[i][1]*vecKeywords2[i][1];
  }
   console.log("noktasal çarpım:"+dot);

//norm
var norm1=0;
   for (let i = 0; i < vecKeywords1.length; i++) {
      norm1+=vecKeywords1[i][1]*vecKeywords1[i][1]
  }
 
  norm1=Math.sqrt(norm1)
  console.log(norm1)
  var norm2=0;
   for (let i = 0; i < vecKeywords2.length; i++) {
    norm2+=vecKeywords2[i][1]*vecKeywords2[i][1]
  }
  norm2=Math.sqrt(norm2)
  console.log(norm2)
  var cosine=0;
  //cos(d1,d2) = dot(d1,d2) / (||d1|| ||d2||) 
  cosine=100*dot/(norm1*norm2);
  console.log("Kosinüs benzerliği:"+100*dot/(norm1*norm2))
  LastScore=cosine;
  if(LastScore>100){
    LastScore=100;
  }
  if(LastScore<0){
    LastScore=0;
  }
   console.log("1 toplam kelime sayısı "+allWordCount1)
   console.log("2 toplam kelime sayısı "+allWordCount2)
  }
 
 var path = require('path');
const util = require('util')
const axios = require('axios');
var score=0;
 class Site {
  constructor(url, Keywords2,SubLink,Score,subSite,id,rank) {
    this.url = url;
    this.Keywords2 = Keywords2;
    this.SubLink = SubLink;
    this.Score = Score;
    this.subSite = subSite;
    this.id=id;
    this.rank=rank;
  }
};
var id=0;
var LastScore = 0;
var AllSites = []
var dataPromiseGlobal;
var wordFrequency = [];
var ResultFrequency = [];   
var allTerms=[];
var sortArray = [];
var keyword = [];
var firstsiteurl = "";
var urlarray = [];
var mainurl="";
var Keywords1 = []
var Keywords2 = []
  jsdom = require('jsdom'),
  { JSDOM } = jsdom;
  //url = 'https://www.hurriyet.com.tr/sporarena/son-dakika-fernando-muslera-galatasaray-ile-sozlesme-yeniledi-transfer-itirafi-41764182';
  url=''
function Keywordsfinder(url) {

  const getNodes = html => {
    const TextData = [],
      dom = new JSDOM(html),
      news = dom.window.document.querySelectorAll('p');
    news.forEach(item => {
      Text += item.textContent.toLowerCase();
      TextData.push({
        text: item.textContent,
      })
    });

    var result = Text.split(/['\t', -.'\n']+/);
    //console.log(result.length)

    let wordFrequency = []
    for (var i = 0; i < result.length; i++) {
      wordFrequency[i] = [];
      for (var j = 0; j < 2; j++) {
        wordFrequency[i][j] = undefined;
      }
    }

    wordFrequency[0][0] = result[0];
    wordFrequency[0][1] = 1;

    async function AddStopWords(){
      try {
        var data = fs.readFileSync('stop_words_turkish.txt', 'utf8');
          
        return data.split(/[''\n\r']+/);
      } catch(e) {
        console.log('Error:', e.stack);
        return null;
      }
    }    
    
    var stopwords = await AddStopWords();
    console.log(stopwords.length);
    for (let i = 1; i < result.length; i++) {
      var isexist = -1;
      for (let j = 0; j < wordFrequency.length; j++) {
        if (result[i] == wordFrequency[j][0]) {

          wordFrequency[j][1]++;
          isexist = j;
          break;
        }
        
      }


      if (isexist == -1) {
        if (!stopwords.includes(result[i])) {
          for (let j = 0; j < wordFrequency.length; j++) {
            if (wordFrequency[j][0] == undefined) {
              wordFrequency[j][0] = result[i];
              wordFrequency[j][1] = 1;
              break;
            }
          }
        }

      }
    }

    for (let j = 0; j < wordFrequency.length - 1; j++) {
      for (let i = 0; i < wordFrequency.length - i; i++) {
        if (wordFrequency[i][1] < wordFrequency[i + 1][1]) {
          let temp = wordFrequency[i + 1];
          wordFrequency[i + 1] = wordFrequency[i];
          wordFrequency[i] = temp;
        }
      }
    }

    var number = result.length * (2 / 100);
    var roundedNumber = Math.round(number);

    let keyword = [];
    for (let i = 0; i < roundedNumber; i++) {
      keyword[i] = [];
      keyword[i][0] = wordFrequency[i][0];
      keyword[i][1] = wordFrequency[i][1];
    }

    //console.log(keyword);
    return keyword;
  }
  let keywords = [];

  function axiosTest() {
    // create a promise for the axios request
    const promise = axios.get(url).catch( (error) => console.error("Hata1:"+error))

    // using .then, create a new promise which extracts the data
    const dataPromise = promise.then((response) => response.data).catch( (error) => console.error("Hata2:"+error))

    // return it

    return dataPromise

  }

  // now we can use that data from the outside!

  var Text = "";

  //console.log(keywords)

  dataPromiseGlobal=axiosTest();
  let userToken = dataPromiseGlobal;
  //console.log(userToken) // Promise { <pending> }

  keywords = userToken.then(function (result) {
    // console.log(result) // "Some User token"
    result = getNodes(result);
    return result
  })
  return keywords
}

function UrlFinder(url) {

  const getNodes = html => {
    let urlstartwith="";
    let count=0;
    for (let i = 0; i < url.length; i++) {
        if(url[i]=="/"){
          count++;
        }
        if(count<3){
          urlstartwith+=url[i];
        }
        
    }
    console.log("url başlıyor")
    console.log(urlstartwith);
    let urlarray = [];
    let x = 0;
    dom = new JSDOM(html),
      news = dom.window.document.querySelectorAll('a');
    news.forEach(item => {
      if (item.toString().startsWith(urlstartwith.toString()) && x<5){
        console.log(item.toString())
        urlarray[x++] = item.toString()
        //  console.log(urlarray[x-1])
      }
      
    });
    // console.log(urlarray)
    return urlarray;
  }
  let urlarray = [];

  function axiosTest() {
    // create a promise for the axios request
    const promise = axios.get(url).catch( (error) => console.error("Hata3:"+error))

    // using .then, create a new promise which extracts the data
    const dataPromise = promise.then((response) => response.data).catch( (error) => console.error("Hata4:"+error))

    // return it

    return dataPromise

  }

  // now we can use that data from the outside!

  var Text = "";

  //console.log(keywords)


  let userToken = dataPromiseGlobal;
  //console.log(userToken) // Promise { <pending> }

  urlarray = userToken.then(function (result) {
    // console.log(result) // "Some User token"
    result = getNodes(result);
    //   console.log(result)
    return result
  })
  urlarray.then(function (result) {
    // console.log(result) // "Some User token"
    return result
  })
  return urlarray
}
async function ControlSub(url2, depthLevel) {
  //Keywords1 = await Keywordsfinder(mainurl);
  Keywords2 = await Keywordsfinder(url2);
  let linkurls = await UrlFinder(url2)
  //console.log(linkurls)
  //console.log(Keywords1)
  //console.log(Keywords2)

     //Cosine Similatiry
     console.log("cosine başladı")
     allTerms=[];
 
     for (let i = 0; i < Keywords1.length; i++) {
       let word=Keywords1[i][0];
       let freq=Keywords1[i][1];
       let newword=[];
       newword[0]=word;
       newword[1]=freq;
       allTerms.push(newword)
     }
     var termexist=0;
     for (let i = 0; i < Keywords2.length; i++) {
       termexist=0;
       for (let j = 0; j < allTerms.length; j++) {
          if(allTerms[j][0]==Keywords2[i][0]){
            termexist=1;
          }
        
       }
   
       if(!termexist){
         let word=Keywords2[i][0];
         let freq=Keywords2[i][1];
         let newword=[];
         newword[0]=word;
         newword[1]=freq;
       allTerms.push(newword)
       }
   
     }
   
     for (let x = 0; x < allTerms.length; x++) {
      allTerms[x][1]=0;
     }
     
     //console.log(allTerms)
     //console.log("Keywords dizisi 111:"+Keywords1)
     var vecKeywords1=[];
     var vecKeywords2=[];
     for (let i = 0; i < allTerms.length; i++) {
       let word=allTerms[i][0];
       let freq=allTerms[i][1];
       let newword=[];
       newword[0]=word;
       newword[1]=freq;
      vecKeywords1.push(newword);
     }
     for (let i = 0; i < allTerms.length; i++) {
       let word=allTerms[i][0];
       let freq=allTerms[i][1];
       let newword=[];
       newword[0]=word;
       newword[1]=freq;
       vecKeywords2.push(newword);
     }
    
     for (let i = 0; i < vecKeywords1.length; i++) {
       for (let j = 0; j < Keywords1.length; j++) {
         if(vecKeywords1[i][0]==Keywords1[j][0]){
           vecKeywords1[i][1]=Keywords1[j][1];
         }
   
       }
       
     }
     
     for (let i = 0; i < vecKeywords2.length; i++) {
       for (let j = 0; j < Keywords2.length; j++) {
         if(vecKeywords2[i][0]==Keywords2[j][0]){
           vecKeywords2[i][1]=Keywords2[j][1];
         }
   
       }
     }
   
     //console.log(vecKeywords1);
     //console.log(vecKeywords2);
     
     var dot = 0 ; // 
     
     for (let i = 0; i < vecKeywords1.length; i++) {
       dot+=vecKeywords1[i][1]*vecKeywords2[i][1];
     }
      //console.log("noktasal çarpım:"+dot);
   
   //norm
   var norm1=0;
      for (let i = 0; i < vecKeywords1.length; i++) {
         norm1+=vecKeywords1[i][1]*vecKeywords1[i][1]
     }
    
     norm1=Math.sqrt(norm1)
     //console.log(norm1)
     var norm2=0;
      for (let i = 0; i < vecKeywords2.length; i++) {
       norm2+=vecKeywords2[i][1]*vecKeywords2[i][1]
     }
     norm2=Math.sqrt(norm2)
     //console.log(norm2)
     var cosine=0;
     //cos(d1,d2) = dot(d1,d2) / (||d1|| ||d2||) 
     console.log("normların çarpımı"+norm1*norm2);
     if(norm1*norm2==0){
       cosine=0;
     }
     else {
       cosine=100*dot/(norm1*norm2);
     }
   
     console.log("Kosinüs benzerliği:"+cosine)
     LastScore=cosine;

  let subSites= []
  //console.log(allfrequency)
  //console.log(score / allfrequency)
  if(LastScore>100){
    LastScore=100;
  }
  if(LastScore<0){
    LastScore=0;
  }
  var newsite= new Site (url2,Keywords2,linkurls,LastScore,subSites,id,0);
  console.log(newsite.Score);
  id++;
  for (let i = 0; i < linkurls.length; i++) {
    //console.log(depthLevel)
    if (depthLevel < 3){
      depthLevel++;
      // console.log("İlk alt sitenin ilk alt sitesi:" + linkurls[i])
      newsite.subSite.push(await ControlSub(linkurls[i], depthLevel))
       depthLevel--;
    }
     
  }

  return newsite;

}
async function Controlx(mainurl) {
  Keywords1 = await Keywordsfinder(mainurl);
}
async function Control(url2) {
  
  //Keywords1 = await Keywordsfinder(mainurl);
  Keywords2 = await Keywordsfinder(url2)

 // console.log(Keywords1)
 // console.log(Keywords2)

 //Cosine Similatiry
 allTerms=[];

 for (let i = 0; i < Keywords1.length; i++) {
   let word=Keywords1[i][0];
   let freq=Keywords1[i][1];
   let newword=[];
   newword[0]=word;
   newword[1]=freq;
   allTerms.push(newword)
 }
 var termexist=0;
 for (let i = 0; i < Keywords2.length; i++) {
   termexist=0;
   for (let j = 0; j < allTerms.length; j++) {
      if(allTerms[j][0]==Keywords2[i][0]){
        termexist=1;
      }
    
   }

   if(!termexist){
     let word=Keywords2[i][0];
     let freq=Keywords2[i][1];
     let newword=[];
     newword[0]=word;
     newword[1]=freq;
   allTerms.push(newword)
   }

 }

 for (let x = 0; x < allTerms.length; x++) {
  allTerms[x][1]=0;
 }
 

 //console.log(allTerms)
 //console.log("Keywords dizisi 111:"+Keywords1)
 var vecKeywords1=[];
 var vecKeywords2=[];
 for (let i = 0; i < allTerms.length; i++) {
   let word=allTerms[i][0];
   let freq=allTerms[i][1];
   let newword=[];
   newword[0]=word;
   newword[1]=freq;
  vecKeywords1.push(newword);
 }
 for (let i = 0; i < allTerms.length; i++) {
   let word=allTerms[i][0];
   let freq=allTerms[i][1];
   let newword=[];
   newword[0]=word;
   newword[1]=freq;
   vecKeywords2.push(newword);
 }

 for (let i = 0; i < vecKeywords1.length; i++) {
   for (let j = 0; j < Keywords1.length; j++) {
     if(vecKeywords1[i][0]==Keywords1[j][0]){
       vecKeywords1[i][1]=Keywords1[j][1];
     }

   }
   
 }
 
 for (let i = 0; i < vecKeywords2.length; i++) {
   for (let j = 0; j < Keywords2.length; j++) {
     if(vecKeywords2[i][0]==Keywords2[j][0]){
       vecKeywords2[i][1]=Keywords2[j][1];
     }

   }
 }
//console.log("Vec Kelimeler")
// console.log(vecKeywords1);
// console.log(vecKeywords2);
 
// console.log("Keywords1")
// console.log(Keywords1)

// console.log("Keywords2")
// console.log(Keywords2)

 var dot = 0 ; // 
 
 for (let i = 0; i < vecKeywords1.length; i++) {
   dot+=vecKeywords1[i][1]*vecKeywords2[i][1];
 }
  console.log("noktasal çarpım:"+dot);

//norm
var norm1=0;
  for (let i = 0; i < vecKeywords1.length; i++) {
     norm1+=vecKeywords1[i][1]*vecKeywords1[i][1]
 }

 norm1=Math.sqrt(norm1)
 console.log(norm1)
 var norm2=0;
  for (let i = 0; i < vecKeywords2.length; i++) {
   norm2+=vecKeywords2[i][1]*vecKeywords2[i][1]
 }
 norm2=Math.sqrt(norm2)
 console.log(norm2)
 var cosine=0;
 //cos(d1,d2) = dot(d1,d2) / (||d1|| ||d2||) 
 if(norm1*norm2==0){
  cosine=0;
}
else {
  cosine=100*dot/(norm1*norm2);
}
 console.log("Kosinüs benzerliği:"+cosine)
 LastScore=cosine;
  //console.log("1 toplam kelime sayısı "+allWordCount1)
  //console.log("2 toplam kelime sayısı "+allWordCount2)

  let depthLevel = 0;
  let subSites = []
  let linkurls = await UrlFinder(url2)
 // console.log(linkurls)
 if(LastScore>100){
  LastScore=100;
}
if(LastScore<0){
  LastScore=0;
}
 var newsite= new Site (url2,Keywords2,linkurls,LastScore,subSites,id,0);
  id++;
  for (let i = 0; i < linkurls.length; i++) {
    depthLevel = 2;
    //console.log("İlk alt site:" + linkurls[i])
    newsite.subSite.push(await ControlSub(linkurls[i], depthLevel))
  }
  
//console.log(AllSites);
  return newsite;
}
async function AllSiteadd(AllSites) {
  await Controlx(mainurl);
  for (let i = 0; i < urlarray.length; i++) {
    let sitex=await Control(urlarray[i],AllSites)
    AllSites.push(sitex)
   // console.log(AllSites)
  }
  return AllSites
}

async function ScoreCalculate() {
  AllSites=await AllSiteadd(AllSites)
  //console.log(AllSites)
  //console.log(AllSites[2].Keywords2)
  for(let i=0;i<AllSites.length;i++){
    //console.log(AllSites[i]);
    for(let j=0;j<AllSites[i].subSite.length;j++){
      //console.log(AllSites[i].subSite[j]);
        for(let k=0;k<AllSites[i].subSite[j].subSite.length;k++){
          AllSites[i].subSite[j].Score+=AllSites[i].subSite[j].subSite[k].Score*2/10;
         // console.log(AllSites[i].subSite[j].subSite[k]);
        }
        AllSites[i].Score+=AllSites[i].subSite[j].Score*2/10;
    }
  
  
  }

}
function sortSites() {
  sortArray = [];
  for(let i=0;i<AllSites.length;i++){
    sortArray.push(AllSites[i])
    for(let j=0;j<AllSites[i].subSite.length;j++){
      sortArray.push(AllSites[i].subSite[j]);
        for(let k=0;k<AllSites[i].subSite[j].subSite.length;k++){
          sortArray.push(AllSites[i].subSite[j].subSite[k]);    
        }
    }
}
//console.log("SORT ARRAY");
//console.log(sortArray)
for (let i = 0; i < sortArray.length-1; i++) {
  for (let j = 0; j < sortArray.length-1; j++) {
    if(sortArray[j].Score<sortArray[j+1].Score){
      let temp=sortArray[j+1];
      sortArray[j+1]=sortArray[j]
      sortArray[j]=temp;
    }
  }
}

for(let i=0;i<AllSites.length;i++){
  for (let k = 0; k < sortArray.length; k++) {
  if(AllSites[i].id==sortArray[k].id)
  {
    AllSites[i].rank=k;
    break;
  }

  }
  for(let j=0;j<AllSites[i].subSite.length;j++){
    for (let k = 0; k < sortArray.length; k++) {
      if(AllSites[i].subSite[j].id==sortArray[k].id){
        AllSites[i].subSite[j].rank=k;
        break;
      }
      
      }
      for(let k=0;k<AllSites[i].subSite[j].subSite.length;k++){
        for (let x = 0; x < sortArray.length; x++) {
          if(AllSites[i].subSite[j].subSite[k].id==sortArray[x].id){
            AllSites[i].subSite[j].subSite[k].rank=x;
            break;
          }
          
          }
      }
  }
}
//console.log("SIRALANMIŞ SORT ARRAY");
//console.log(sortArray)
for(let i=0;i<AllSites.length;i++){
  //console.log(AllSites[i]);
  for(let j=0;j<AllSites[i].subSite.length;j++){
    //console.log(AllSites[i].subSite[j]);
      for(let k=0;k<AllSites[i].subSite[j].subSite.length;k++){
       // console.log(AllSites[i].subSite[j].subSite[k]);
          
      }
  }

}
}

module.exports.MultipleURL = function (req,res) {
  res.render('page4MultipleURL',{mainurl:"",AllSites:[],Keywords1:[]})
}
 module.exports.MultipleURLPost = function (req,res) {
  AllSites=[];
  //console.log(req.body)
  var count = Object.keys(req.body).length
   mainurl=req.body.mainurl;
   urlarray = [];
  for (let i = 1; i < count; i++) {
      urlarray.push(req.body[Object.keys(req.body)[i]])
     //  console.log(Object.keys(req.body)[i])
   //  console.log("Deger"+ req.body[Object.keys(req.body)[i]])
  }
 // console.log(urlarray)
  //console.log("url array yazdırdık")
     async function printScore() {
       await ScoreCalculate(req.body.mainurl,req.body.secondurl);
    //   console.log("Tüm siteler:")
   //    console.log(AllSites)
      await sortSites();
       res.render('page4MultipleURL',{mainurl:req.body.mainurl,AllSites:AllSites,Keywords1:Keywords1})
     }

     printScore();

 }

 var path = require('path');
const util = require('util')
const axios = require('axios');
var fs = require('fs');
const { read } = require('fs');
var score=0;
 class Site {
  constructor(url, Keywords2,SubLink,Score,subSite,id,rank) {
    this.url = url;
    this.Keywords2 = Keywords2;
    this.SubLink = SubLink;
    this.Score = Score;
    this.subSite = subSite;
    this.id=id;
    this.rank=rank;
  }
};
var id=0;
var LastScore = 0;
var AllSites = []
var wordFrequency = [];
var ResultFrequency = [];   
var sortArray = [];
var allTerms=[];
var keyword = [];
var dataPromiseGlobal;
var urlarray = [];
var mainurl="";
var Keywords1 = []
var Keywords2 = []
  jsdom = require('jsdom'),
  { JSDOM } = jsdom;
  //url = 'https://www.hurriyet.com.tr/sporarena/son-dakika-fernando-muslera-galatasaray-ile-sozlesme-yeniledi-transfer-itirafi-41764182';
      url=''
async function Semantik(url,b) {
   
    const getNodes2 = html => {
        var Text = ""
        const TextData = [],
          dom = new JSDOM(html),
          news = dom.window.document.querySelectorAll('#esanlamlar');
        news.forEach(item => {
          Text += item.textContent.toLowerCase();
          TextData.push({
            text: item.textContent,
          })
        });
        var result = Text.split(/[, .'\n']+/);
      //  console.log(result)
        //console.log(result.length)
        SemantikEsAnlamlar = []
        for (let x = 6; x < result.length; x++) {
          SemantikEsAnlamlar.push(result[x]);
        }     

      }

    await axios.get(url)
  .then(response => {
      getNodes2(response.data);
  })
  .catch(error => {
    console.error(error);
  })
var Text = "";

  }

async function Keywordsfinder(url) {
console.log("Keyword bulunuyor")
    async function getNodes(html) {
    const TextData = [],
      dom = new JSDOM(html),
      news = dom.window.document.querySelectorAll('p');
    news.forEach(item => {
      Text += item.textContent.toLowerCase();
      TextData.push({
        text: item.textContent,
      })
    });

    var result = Text.split(/['\t', -.'\n']+/);
    //console.log(result.length)
   // console.log("METİN")
  //  console.log(result)
  
    let wordFrequency = []
    for (var i = 0; i < result.length; i++) {
      wordFrequency[i] = [];
      for (var j = 0; j < 2; j++) {
        wordFrequency[i][j] = undefined;
      }
    }

    wordFrequency[0][0] = result[0];
    wordFrequency[0][1] = 1;

    
async function AddStopWords(){
  try {
    var data = fs.readFileSync('stop_words_turkish.txt', 'utf8');
      
    return data.split(/[''\n\r']+/);
  } catch(e) {
    console.log('Error:', e.stack);
    return null;
  }
}    

var stopwords = await AddStopWords();
console.log(stopwords.length);

    console.log(util.inspect(stopwords, { maxArrayLength: null }))
   


    for (let i = 1; i < result.length; i++) {
      var isexist = -1;
      for (let j = 0; j < wordFrequency.length; j++) {
        if (result[i] == wordFrequency[j][0]) {

          wordFrequency[j][1]++;
          isexist = j;
          break;
        }

      }
      if (isexist == -1) {
        if (!stopwords.includes(result[i])) {
          for (let j = 0; j < wordFrequency.length; j++) {
            if (wordFrequency[j][0] == undefined) {
              wordFrequency[j][0] = result[i];
              wordFrequency[j][1] = 1;
              break;
            }
          }
        }

      }

    }

    for (let j = 0; j < wordFrequency.length - 1; j++) {
      for (let i = 0; i < wordFrequency.length - i; i++) {
        if (wordFrequency[i][1] < wordFrequency[i + 1][1]) {
          let temp = wordFrequency[i + 1];
          wordFrequency[i + 1] = wordFrequency[i];
          wordFrequency[i] = temp;
        }
      }
    }
    
    var number = result.length * (2 / 100);
    var roundedNumber = Math.round(number);
    
    var keyword = [];
    for (let i = 0; i < roundedNumber; i++) {
      keyword[i] = [];
      keyword[i][0] = wordFrequency[i][0];
      keyword[i][1] = wordFrequency[i][1];
    }
   
   // console.log(keyword);
    var semantikkeyword = keyword
   //  console.log(semantikkeyword)
    for (let i = 0; i < keyword.length; i++) {
        var charMap = {Ç:'C',Ö:'O',Ş:'S',İ:'I',I:'i',Ü:'U',Ğ:'G',ç:'c',ö:'o',ş:'s',ı:'i',ü:'u',ğ:'g'};
        for (let x = 0; x < semantikkeyword.length; x++) {
            var str =     semantikkeyword[x][0]
            str_array = str.split('');
            for(let y=0, len = str_array.length; y < len; y++) {
                str_array[y] = charMap[ str_array[y] ] || str_array[y];
            }

            str = str_array.join('');

            var clearStr = str.replace(" ","").replace("-","").replace(/[^a-z0-9-.çöşüğı]/gi,"");
        semantikkeyword[x][0]=clearStr
        } 
    }
    for (let a = 0; a < semantikkeyword.length; a++) {
        var urlsemantik='https://es-anlam.com/kelime/'+semantikkeyword[a][0]
  //  console.log(semantikkeyword)
    if(urlsemantik!='https://es-anlam.com/kelime/' && url!='https://www.hurriyet.com.tr/sporarena/son-dakika-fernando-muslera-galatasaray-ile-sozlesme-yeniledi-transfer-itirafi-41764182'){
       await Semantik(urlsemantik,a);
     //  console.log(url)
    //   console.log("Semantik url"+urlsemantik)
       // console.log("Keyword dizisi"+semantikkeyword)
        if(!SemantikEsAnlamlar.includes('bulunamadi')){
          //console.log("Semantik eş anlamlar")
          // console.log(SemantikEsAnlamlar)
          keyword[a][2]=SemantikEsAnlamlar
        //   console.log(keyword[a][2].length)
     
           
        }
    }
        
    }

    for (let i = 0; i < result.length; i++) {
      for (let j = 0; j < keyword.length; j++) {
      //  console.log("Keyword.length"+keyword.length)
       // console.log("Eşit mi diye kontrol:"+j)
      //  console.log(keyword[j])
        if(keyword[j][2]!=undefined){
          for (let k = 0; k < keyword[j][2].length; k++) {
            if(result[i]==keyword[j][2][k] && keyword[j][2][k]!=keyword[j][0]){
            //  console.log("ilk frekansı:"+keyword[j][1])
            //  console.log("Metindeki kelime : "+result[i]+" Eş Anlamlı Kelimesi: "+keyword[j][2][k]+" Frekansı artan kelime : "+keyword[j][0]+" RESULT I NIN DEGERI: "+i+" Keyword J nin degeri "+j+"  anahtar kelime K: "+ k)
              //console.log(" RESULT I NIN DEGERI: "+i+" Keyword J nin degeri "+j+"  anahtar kelime K: "+ k)
              keyword[j][1]++
            }
    
        }
        }
           
        
      }

}


    return keyword;
  }


  function axiosTest() {
    // create a promise for the axios request
    const promise = axios.get(url).catch( (error) => console.error("Hata1:"+error))

    // using .then, create a new promise which extracts the data
    const dataPromise = promise.then((response) => response.data).catch( (error) => console.error("Hata2:"+error))

    // return it

    return dataPromise

  }

  // now we can use that data from the outside!

  var Text = "";

  //console.log(keywords)

  dataPromiseGlobal=axiosTest();
  let userToken = dataPromiseGlobal;
  //console.log(userToken) // Promise { <pending> }

  keywords = userToken.then(function (result) {
    // console.log(result) // "Some User token"
    result = getNodes(result);
    return result
  })
  console.log("Keyword bulma bitti")
  return keywords
}

function UrlFinder(url) {
console.log("Url bulma başladı")
  const getNodes = html => {
    let urlstartwith="";
    let count=0;
    for (let i = 0; i < url.length; i++) {
        if(url[i]=="/"){
          count++;
        }
        if(count<3){
          urlstartwith+=url[i];
        }
        
    }
    let urlarray = [];
    let x = 0;
    dom = new JSDOM(html),
      news = dom.window.document.querySelectorAll('a');
    news.forEach(item => {
      if (item.toString().startsWith(urlstartwith.toString())  && x<5)
        urlarray[x++] = item.toString()
      //  console.log(urlarray[x-1])
    });
    // console.log(urlarray)
    return urlarray;
  }
  let urlarray = [];

  function axiosTest() {
    // create a promise for the axios request
    const promise = axios.get(url)

    // using .then, create a new promise which extracts the data
    const dataPromise = promise.then((response) => response.data)

    // return it

    return dataPromise

  }

  // now we can use that data from the outside!

  var Text = "";

  //console.log(keywords)


  let userToken = dataPromiseGlobal;
  //console.log(userToken) // Promise { <pending> }

  urlarray = userToken.then(function (result) {
    // console.log(result) // "Some User token"
    result = getNodes(result);
    //   console.log(result)
    return result
  })
  urlarray.then(function (result) {
    // console.log(result) // "Some User token"
    return result
  })
  console.log("Url bulma başladı")
  return urlarray
}

async function ControlSub(url2, depthLevel) {
 // Keywords1 = await Keywordsfinder(mainurl);
  Keywords2 = await Keywordsfinder(url2);
  let linkurls = await UrlFinder(url2)
  //console.log(linkurls)
  //console.log(Keywords1)
  //console.log(Keywords2)

    //Cosine Similatiry
    console.log("cosine başladı")
    allTerms=[];

    for (let i = 0; i < Keywords1.length; i++) {
      let word=Keywords1[i][0];
      let freq=Keywords1[i][1];
      let newword=[];
      newword[0]=word;
      newword[1]=freq;
      allTerms.push(newword)
    }
    var termexist=0;
    for (let i = 0; i < Keywords2.length; i++) {
      termexist=0;
      for (let j = 0; j < allTerms.length; j++) {
         if(allTerms[j][0]==Keywords2[i][0]){
           termexist=1;
         }
       
      }
  
      if(!termexist){
        let word=Keywords2[i][0];
        let freq=Keywords2[i][1];
        let newword=[];
        newword[0]=word;
        newword[1]=freq;
      allTerms.push(newword)
      }
  
    }
  
    for (let x = 0; x < allTerms.length; x++) {
     allTerms[x][1]=0;
    }
    
   
    //console.log(allTerms)
    //console.log("Keywords dizisi 111:"+Keywords1)
    var vecKeywords1=[];
    var vecKeywords2=[];
    for (let i = 0; i < allTerms.length; i++) {
      let word=allTerms[i][0];
      let freq=allTerms[i][1];
      let newword=[];
      newword[0]=word;
      newword[1]=freq;
     vecKeywords1.push(newword);
    }
    for (let i = 0; i < allTerms.length; i++) {
      let word=allTerms[i][0];
      let freq=allTerms[i][1];
      let newword=[];
      newword[0]=word;
      newword[1]=freq;
      vecKeywords2.push(newword);
    }
   
    for (let i = 0; i < vecKeywords1.length; i++) {
      for (let j = 0; j < Keywords1.length; j++) {
        if(vecKeywords1[i][0]==Keywords1[j][0]){
          vecKeywords1[i][1]=Keywords1[j][1];
        }
  
      }
      
    }
    
    for (let i = 0; i < vecKeywords2.length; i++) {
      for (let j = 0; j < Keywords2.length; j++) {
        if(vecKeywords2[i][0]==Keywords2[j][0]){
          vecKeywords2[i][1]=Keywords2[j][1];
        }
  
      }
    }
  
   // console.log(vecKeywords1);
   // console.log(vecKeywords2);

    //console.log("Keywords1")
   // console.log(Keywords1)
    
    var dot = 0 ; // 
    
    for (let i = 0; i < vecKeywords1.length; i++) {
      dot+=vecKeywords1[i][1]*vecKeywords2[i][1];
    }
     //console.log("noktasal çarpım:"+dot);
  
  //norm
  var norm1=0;
     for (let i = 0; i < vecKeywords1.length; i++) {
        norm1+=vecKeywords1[i][1]*vecKeywords1[i][1]
    }
   
    norm1=Math.sqrt(norm1)
    //console.log(norm1)
    var norm2=0;
     for (let i = 0; i < vecKeywords2.length; i++) {
      norm2+=vecKeywords2[i][1]*vecKeywords2[i][1]
    }
    norm2=Math.sqrt(norm2)
    //console.log(norm2)
    var cosine=0;
    //cos(d1,d2) = dot(d1,d2) / (||d1|| ||d2||) 
    console.log("normların çarpımı"+norm1*norm2);
    if(norm1*norm2==0){
      cosine=0;
    }
    else {
      cosine=100*dot/(norm1*norm2);
    }
  
    console.log("Kosinüs benzerliği:"+cosine)
    LastScore=cosine;
     //console.log("1 toplam kelime sayısı "+allWordCount1)
     //console.log("2 toplam kelime sayısı "+allWordCount2)
  let allfrequency = 0;
  for (let j = 0; j < Keywords2.length; j++) {
    allfrequency += Keywords2[j][1]
  }
  let subSites= []
  //console.log(allfrequency)
  //console.log(score / allfrequency)
  if(LastScore>100){
    LastScore=100;
  }
  if(LastScore<0){
    LastScore=0;
  }
  var newsite= new Site (url2,Keywords2,linkurls,LastScore,subSites,id,0);
  id++;
  for (let i = 0; i < linkurls.length; i++) {
    //console.log(depthLevel)
    if (depthLevel < 3){
      depthLevel++;
      // console.log("İlk alt sitenin ilk alt sitesi:" + linkurls[i])
      newsite.subSite.push(await ControlSub(linkurls[i], depthLevel))
       depthLevel--;
    }
     
  }

  return newsite;

}
async function Controlx(mainurl) {
  console.log(mainurl)
  Keywords1 = await Keywordsfinder(mainurl);
  console.log(Keywords1)
}
async function Control(url2) {
  
  //Keywords1 = await Keywordsfinder(mainurl);
  Keywords2 = await Keywordsfinder(url2)

 // console.log(Keywords1)
 // console.log(Keywords2)
  //Cosine Similatiry
  allTerms=[];

  for (let i = 0; i < Keywords1.length; i++) {
    let word=Keywords1[i][0];
    let freq=Keywords1[i][1];
    let newword=[];
    newword[0]=word;
    newword[1]=freq;
    allTerms.push(newword)
  }
  var termexist=0;
  for (let i = 0; i < Keywords2.length; i++) {
    termexist=0;
    for (let j = 0; j < allTerms.length; j++) {
       if(allTerms[j][0]==Keywords2[i][0]){
         termexist=1;
       }
     
    }

    if(!termexist){
      let word=Keywords2[i][0];
      let freq=Keywords2[i][1];
      let newword=[];
      newword[0]=word;
      newword[1]=freq;
    allTerms.push(newword)
    }

  }

  for (let x = 0; x < allTerms.length; x++) {
   allTerms[x][1]=0;
  }
  
 
  //console.log(allTerms)
  //console.log("Keywords dizisi 111:"+Keywords1)
  var vecKeywords1=[];
  var vecKeywords2=[];
  for (let i = 0; i < allTerms.length; i++) {
    let word=allTerms[i][0];
    let freq=allTerms[i][1];
    let newword=[];
    newword[0]=word;
    newword[1]=freq;
   vecKeywords1.push(newword);
  }
  for (let i = 0; i < allTerms.length; i++) {
    let word=allTerms[i][0];
    let freq=allTerms[i][1];
    let newword=[];
    newword[0]=word;
    newword[1]=freq;
    vecKeywords2.push(newword);
  }
 
  for (let i = 0; i < vecKeywords1.length; i++) {
    for (let j = 0; j < Keywords1.length; j++) {
      if(vecKeywords1[i][0]==Keywords1[j][0]){
        vecKeywords1[i][1]=Keywords1[j][1];
      }

    }
    
  }
  
  for (let i = 0; i < vecKeywords2.length; i++) {
    for (let j = 0; j < Keywords2.length; j++) {
      if(vecKeywords2[i][0]==Keywords2[j][0]){
        vecKeywords2[i][1]=Keywords2[j][1];
      }

    }
  }

  //console.log(vecKeywords1);
  //console.log(vecKeywords2);
  
  var dot = 0 ; // 
  
  for (let i = 0; i < vecKeywords1.length; i++) {
    dot+=vecKeywords1[i][1]*vecKeywords2[i][1];
  }
   //console.log("noktasal çarpım:"+dot);

//norm
var norm1=0;
   for (let i = 0; i < vecKeywords1.length; i++) {
      norm1+=vecKeywords1[i][1]*vecKeywords1[i][1]
  }
 
  norm1=Math.sqrt(norm1)
  //console.log(norm1)
  var norm2=0;
   for (let i = 0; i < vecKeywords2.length; i++) {
    norm2+=vecKeywords2[i][1]*vecKeywords2[i][1]
  }
  norm2=Math.sqrt(norm2)
  //console.log(norm2)
  var cosine=0;
  //cos(d1,d2) = dot(d1,d2) / (||d1|| ||d2||) 
  if(norm1*norm2==0){
    cosine=0;
  }
  else {
    cosine=100*dot/(norm1*norm2);
  }

  console.log("Kosinüs benzerliği:"+cosine)
  LastScore=cosine;
   //console.log("1 toplam kelime sayısı "+allWordCount1)
   //console.log("2 toplam kelime sayısı "+allWordCount2)
  let depthLevel = 0;
  let subSites = []
  let linkurls = await UrlFinder(url2)
 // console.log(linkurls)
 if(LastScore>100){
  LastScore=100;
}
if(LastScore<0){
  LastScore=0;
}
 var newsite= new Site (url2,Keywords2,linkurls,LastScore,subSites,id,0);
  id++;
  for (let i = 0; i < linkurls.length; i++) {
    depthLevel = 2;
    //console.log("İlk alt site:" + linkurls[i])
    newsite.subSite.push(await ControlSub(linkurls[i], depthLevel))
  }
  
//console.log(AllSites);
  return newsite;
}
async function AllSiteadd(AllSites) {
  await Controlx(mainurl);
  for (let i = 0; i < urlarray.length; i++) {
    let sitex=await Control(urlarray[i],AllSites)
    AllSites.push(sitex)
   // console.log(AllSites)
  }
  return AllSites
}

async function ScoreCalculate() {
  AllSites=await AllSiteadd(AllSites)
  //console.log(AllSites)
  //console.log(AllSites[2].Keywords2)
  for(let i=0;i<AllSites.length;i++){
    //console.log(AllSites[i]);
    for(let j=0;j<AllSites[i].subSite.length;j++){
      //console.log(AllSites[i].subSite[j]);
        for(let k=0;k<AllSites[i].subSite[j].subSite.length;k++){
          AllSites[i].subSite[j].Score+=AllSites[i].subSite[j].subSite[k].Score*2/10;
         // console.log(AllSites[i].subSite[j].subSite[k]);
        }
        AllSites[i].Score+=AllSites[i].subSite[j].Score*2/10;
    }
  
  
  }
}

function sortSites() {
  sortArray = [];
  for(let i=0;i<AllSites.length;i++){
    sortArray.push(AllSites[i])
    for(let j=0;j<AllSites[i].subSite.length;j++){
      sortArray.push(AllSites[i].subSite[j]);
        for(let k=0;k<AllSites[i].subSite[j].subSite.length;k++){
          sortArray.push(AllSites[i].subSite[j].subSite[k]);    
        }
    }
}
//console.log("SORT ARRAY");
//console.log(sortArray)
for (let i = 0; i < sortArray.length-1; i++) {
  for (let j = 0; j < sortArray.length-1; j++) {
    if(sortArray[j].Score<sortArray[j+1].Score){
      let temp=sortArray[j+1];
      sortArray[j+1]=sortArray[j]
      sortArray[j]=temp;
    }
  }
}

for(let i=0;i<AllSites.length;i++){
  for (let k = 0; k < sortArray.length; k++) {
  if(AllSites[i].id==sortArray[k].id)
  {
    AllSites[i].rank=k;
    break;
  }

  }
  for(let j=0;j<AllSites[i].subSite.length;j++){
    for (let k = 0; k < sortArray.length; k++) {
      if(AllSites[i].subSite[j].id==sortArray[k].id){
        AllSites[i].subSite[j].rank=k;
        break;
      }
      
      }
      for(let k=0;k<AllSites[i].subSite[j].subSite.length;k++){
        for (let x = 0; x < sortArray.length; x++) {
          if(AllSites[i].subSite[j].subSite[k].id==sortArray[x].id){
            AllSites[i].subSite[j].subSite[k].rank=x;
            break;
          }
          
          }
      }
  }
}
//console.log("SIRALANMIŞ SORT ARRAY");
//console.log(sortArray)
for(let i=0;i<AllSites.length;i++){
  //console.log(AllSites[i]);
  for(let j=0;j<AllSites[i].subSite.length;j++){
    //console.log(AllSites[i].subSite[j]);
      for(let k=0;k<AllSites[i].subSite[j].subSite.length;k++){
       // console.log(AllSites[i].subSite[j].subSite[k]);
          
      }
  }

}
}

module.exports.Semantik = function (req,res) {
  res.render('page5Semantik',{mainurl:"",AllSites:[],Keywords1:[]})
}
 module.exports.SemantikPost = function (req,res) {
  AllSites=[];
  //console.log(req.body)
  var count = Object.keys(req.body).length
   mainurl=req.body.mainurl;
   urlarray = [];
  for (let i = 1; i < count; i++) {
      urlarray.push(req.body[Object.keys(req.body)[i]])
     //  console.log(Object.keys(req.body)[i])
   //  console.log("Deger"+ req.body[Object.keys(req.body)[i]])
  }
 // console.log(urlarray)
  //console.log("url array yazdırdık")
     async function printScore() {
       await ScoreCalculate(req.body.mainurl,req.body.secondurl);
    //   console.log("Tüm siteler:")
   //    console.log(AllSites)
      await sortSites();
       res.render('page5Semantik',{mainurl:req.body.mainurl,AllSites:AllSites,Keywords1:Keywords1})
     }

     printScore();

 }

 var express = require('express');
var router = express.Router();
var MainPageController = require('../controller/MainPageController')
router.get('/Mainpage', MainPageController.index);
router.post('/Mainpage', MainPageController.indexPost);
var Page1Controller = require('../controller/Page1Controller')
router.get('/Frequency', Page1Controller.Frequency);
router.post('/Frequency', Page1Controller.FrequencyPost);
var Page2Controller = require('../controller/Page2Controller')
router.get('/Keywords', Page2Controller.Keywords);
router.post('/Keywords', Page2Controller.KeywordsPost);
var Page3Controller = require('../controller/Page3Controller')
router.get('/Score', Page3Controller.Score);
router.post('/Score', Page3Controller.ScorePost);
var Page4Controller = require('../controller/Page4Controller')
router.get('/MultipleURL', Page4Controller.MultipleURL);
router.post('/MultipleURL', Page4Controller.MultipleURLPost);
var Page5Controller = require('../controller/Page5Controller')
router.get('/Semantik', Page5Controller.Semantik);
router.post('/Semantik', Page5Controller.SemantikPost);


module.exports = router;
<script>
    function generateInputs(form,input){
        x = input.value;
  for (y = 0; y<x; y++) {
    var element = document.createElement('input');
    element.type = "text";
    element.name="input"+y;
    element.placeholder = "Url giriniz";
    form.appendChild(element);
  }
           
    }
</script>

<div class="panel panel-info"></div>
<div class="panel-heading">
    <div class="panel-title">
        <form action="/MultipleURL" method="POST">
        <h2>
            <label for="fname">Ana URL i Giriniz:</label>
                    <input type="text" id="mainurl" name="mainurl">

                   <br>
                    <label for="fname">Ana URL:</label>
                    <%= mainurl%>
        </h2>

            <div id="input-form">
                <h3>Kaç adet url gireceksiniz:</h3>
                <input type="number" placeholder="Kaç adet url gireceksiniz ?" onchange="generateInputs(document.getElementById('input-form'), this)" required><br>
              </div>
 
        <input type="submit" value="Gönder">
    </form>
<ul>
<% for(var i=0;i<urlarray.length;i++){%>
    <li>URL:<%= urlarray[i]%></li>
<%}
%>

</ul>

    </div>
</div>
<div class="panel-body"></div>
<div class="panel-footer"></div>
<div class="panel panel-info"></div>
<div class="panel-heading">
    <div class="panel-title">
        <form action="/Frequency" method="POST">
        <h2>
            <label for="fname">Ana URL i Giriniz:</label>
                    <input type="text" id="mainurl" name="mainurl">

                   <br>
                    <label for="fname">Ana URL:</label>
                    <%= mainurl%>
        </h2>
        <input type="submit" value="Gönder">
    </form>
<ul>

<% for(var i=0;i<wordfrequency.length;i++)
if(wordfrequency[i][0]!=""){
    {%>
        <li>Kelime:  <%= wordfrequency[i][0]%>  Frekansı: <%= wordfrequency[i][1]%></li>
    <%}
}

%>

</ul>


    </div>
</div>
<div class="panel-body"></div>
<div class="panel-footer"></div>
<div class="panel panel-info"></div>
<div class="panel-heading">
    <div class="panel-title">
        <form action="/Keywords" method="POST">
        <h2>
            <label for="fname">Ana URL i Giriniz:</label>
                    <input type="text" id="mainurl" name="mainurl">

                   <br>
                    <label for="fname">Ana URL:</label>
                    <%= mainurl%>
        </h2>
        <input type="submit" value="Gönder">
    </form>
<ul>

<% for(var i=0;i<keyword.length;i++)
if(keyword[i][0]!=""){
    {%>
        <li>Kelime:  <%= keyword[i][0]%>  Frekansı: <%= keyword[i][1]%></li>
    <%}
}

%>

</ul>


    </div>
</div>
<div class="panel-body"></div>
<div class="panel-footer"></div>
<div class="panel panel-info"></div>
<div class="panel-heading">
    <div class="panel-title">
        <form action="/Score" method="POST">
        <h2>
            <label for="fname">Ana URL i Giriniz:</label>
                    <input type="text" id="mainurl" name="mainurl">

                    <label for="fname">2.Sitenin URL i Giriniz:</label>
                    <input type="text" id="secondurl" name="secondurl">
                   <br>
                    <label for="fname">Ana URL:</label>
                    <%= mainurl%>
                    <br>
                    <label for="fname">2. URL:</label>
                    <%= secondurl%>
                    <br>
                    <label for="fname">Benzerlik Skoru:</label>
                    <%= LastScore%>
        </h2>
        <input type="submit" value="Gönder">
    </form>
<ul>
    <h2>1.Sitenin Anahtar Kelimeleri</h2>
<% for(var i=0;i<Keywords1.length;i++)
if(Keywords1[i][0]!=""){
    {%>
        <li>Kelime:  <%= Keywords1[i][0]%>  Frekansı: <%= Keywords1[i][1]%></li>
    <%}
}

%>


<h2>2.Sitenin Anahtar Kelimeleri</h2>

<% for(var i=0;i<Keywords2.length;i++)
if(Keywords2[i][0]!=""){
    {%>
        <li>Kelime:  <%= Keywords2[i][0]%>  Frekansı: <%= Keywords2[i][1]%></li>
    <%}
}

%>

</ul>


    </div>
</div>
<div class="panel-body"></div>
<div class="panel-footer"></div>
<script>
    function generateInputs(form,input){
        x = input.value;
  for (y = 0; y<x; y++) {
    var element = document.createElement('input');
    element.type = "text";
    element.name="input"+y;
    element.placeholder = "Url giriniz";
    form.appendChild(element);
  }
           
    }
</script>

<div class="panel panel-info"></div>
<div class="panel-heading">
    <div class="panel-title">
        <form action="/MultipleURL" method="POST">
        <h2>
            <label for="fname">Ana URL i Giriniz:</label>
                    <input type="text" id="mainurl" name="mainurl">

                   <br>
                    <label for="fname">Ana URL:</label>
                    <%= mainurl%>
        </h2>

            <div id="input-form">
                <h3>Kaç adet url gireceksiniz:</h3>
                <input type="number" placeholder="Kaç adet url gireceksiniz ?" onchange="generateInputs(document.getElementById('input-form'), this)" required><br>
              </div>
 
        <input type="submit" value="Gönder">
    </form>
<ul>

     
    <h2>1.Sitenin Anahtar Kelimeleri</h2>
    <% for(var i=0;i<Keywords1.length;i++)
    if(Keywords1[i][0]!=""){
        {%>
            <li>Kelime:  <%= Keywords1[i][0]%>  Frekansı: <%= Keywords1[i][1]%></li>
        <%}
    }
    
    %>


<% 
    function printMainSite(Site){
        {%>
            <div style="background-color:rgb(104, 49, 175)">
            <ul>
                <li><h2>Main URL:<%= Site.url%></h2></li>
                <li>Score:<%= Site.Score%></li> 
                <li>Rank:<%= Site.rank%></li> 
                <% for(var j=0;j<Site.Keywords2.length;j++)
        if(Site.Keywords2[j][0]!=""){
            {%>
                <li>Kelime:  <%= Site.Keywords2[j][0]%>  Frekansı: <%= Site.Keywords2[j][1]%></li>
            <%}
        }
        
        %>     
        <% for(var j=0;j<Site.SubLink.length;j++)

            {%>
                <li>SubLink:  <%= Site.SubLink[j]%></li>
            <%}
        
        
        %>     
            </ul>
        </div>
        <%}
    }
    function printSubSite(Site){
        {%>
            <div style="margin-left:200px ; background-color:rgb(0, 140, 255)">
            <ul>
                <li><h2>Sub URL:<%= Site.url%></h2></li>
                <li>Score:<%= Site.Score%></li> 
                <li>Rank:<%= Site.rank%></li> 
                <% for(var j=0;j<Site.Keywords2.length;j++)
        if(Site.Keywords2[j][0]!=""){
            {%>
                <li>Kelime:  <%= Site.Keywords2[j][0]%>  Frekansı: <%= Site.Keywords2[j][1]%></li>
            <%}
        }
        
        %>     
        <% for(var j=0;j<Site.SubLink.length;j++)

            {%>
                <li>SubLink:  <%= Site.SubLink[j]%></li>
            <%}
        
        
        %>     
            </ul>
            </div>
        <%}
    }
    function printSubSiteSub(Site){
        {%>
            <div style="margin-left:500px ; background-color:rgb(0, 68, 255)">
            <ul>
                <li><h2>Sub Sub URL:<%= Site.url%></h2></li>
                <li>Score:<%= Site.Score%></li> 
                <li>Rank:<%= Site.rank%></li> 
                <% for(var j=0;j<Site.Keywords2.length;j++)
        if(Site.Keywords2[j][0]!=""){
            {%>
                <li>Kelime:  <%= Site.Keywords2[j][0]%>  Frekansı: <%= Site.Keywords2[j][1]%></li>
            <%}
        }
        
        %>     
        <% for(var j=0;j<Site.SubLink.length;j++)

            {%>
                <li>SubLink:  <%= Site.SubLink[j]%></li>
            <%}
        
        
        %>     
            </ul>
        </div>
        <%}
    }
    for(let i=0;i<AllSites.length;i++){
        printMainSite(AllSites[i]);
      
        for(let j=0;j<AllSites[i].subSite.length;j++){
           
            printSubSite(AllSites[i].subSite[j]);
            for(let k=0;k<AllSites[i].subSite[j].subSite.length;k++){
               
                printSubSiteSub(AllSites[i].subSite[j].subSite[k]);
                
            }
        }

    }
%>

</ul>

    </div>
</div>
<div class="panel-body"></div>
<div class="panel-footer"></div>
<script>
    function generateInputs(form,input){
        x = input.value;
  for (y = 0; y<x; y++) {
    var element = document.createElement('input');
    element.type = "text";
    element.name="input"+y;
    element.placeholder = "Url giriniz";
    form.appendChild(element);
  }
           
    }
</script>

<div class="panel panel-info"></div>
<div class="panel-heading">
    <div class="panel-title">
        <form action="/Semantik" method="POST">
        <h2>
            <label for="fname">Ana URL i Giriniz:</label>
                    <input type="text" id="mainurl" name="mainurl">

                   <br>
                    <label for="fname">Ana URL:</label>
                    <%= mainurl%>
        </h2>

            <div id="input-form">
                <h3>Kaç adet url gireceksiniz:</h3>
                <input type="number" placeholder="Kaç adet url gireceksiniz ?" onchange="generateInputs(document.getElementById('input-form'), this)" required><br>
              </div>
 
        <input type="submit" value="Gönder">
    </form>
<ul>
    
    <h2>1.Sitenin Anahtar Kelimeleri</h2>
    <% for(var i=0;i<Keywords1.length;i++)
    if(Keywords1[i][0]!=""){
        {%>
            <li>Kelime:  <%= Keywords1[i][0]%>  Frekansı: <%= Keywords1[i][1]%></li>
        <%}
    }
    
    %>

    
<% 
    function printMainSite(Site){
        {%>
            <div style="background-color:rgb(104, 49, 175)">
            <ul>
                <li><h2>Main URL:<%= Site.url%></h2></li>
                <li>Score:<%= Site.Score%></li> 
                <li>Rank:<%= Site.rank%></li> 
                <% for(var j=0;j<Site.Keywords2.length;j++)
        if(Site.Keywords2[j][0]!=""){
            {%>
                <li>Kelime:  <%= Site.Keywords2[j][0]%>  Frekansı: <%= Site.Keywords2[j][1]%></li>
            <%}
        }
        
        %>     
        <% for(var j=0;j<Site.SubLink.length;j++)

            {%>
                <li>SubLink:  <%= Site.SubLink[j]%></li>
            <%}
        
        
        %>     
            </ul>
        </div>
        <%}
    }
    function printSubSite(Site){
        {%>
            <div style="margin-left:200px ; background-color:rgb(0, 140, 255)">
            <ul>
                <li><h2>Sub URL:<%= Site.url%></h2></li>
                <li>Score:<%= Site.Score%></li> 
                <li>Rank:<%= Site.rank%></li> 
                <% for(var j=0;j<Site.Keywords2.length;j++)
        if(Site.Keywords2[j][0]!=""){
            {%>
                <li>Kelime:  <%= Site.Keywords2[j][0]%>  Frekansı: <%= Site.Keywords2[j][1]%></li>
            <%}
        }
        
        %>     
        <% for(var j=0;j<Site.SubLink.length;j++)

            {%>
                <li>SubLink:  <%= Site.SubLink[j]%></li>
            <%}
        
        
        %>     
            </ul>
            </div>
        <%}
    }
    function printSubSiteSub(Site){
        {%>
            <div style="margin-left:500px ; background-color:rgb(0, 68, 255)">
            <ul>
                <li><h2>Sub Sub URL:<%= Site.url%></h2></li>
                <li>Score:<%= Site.Score%></li> 
                <li>Rank:<%= Site.rank%></li> 
                <% for(var j=0;j<Site.Keywords2.length;j++)
        if(Site.Keywords2[j][0]!=""){
            {%>
                <li>Kelime:  <%= Site.Keywords2[j][0]%>  Frekansı: <%= Site.Keywords2[j][1]%></li>
            <%}
        }
        
        %>     
        <% for(var j=0;j<Site.SubLink.length;j++)

            {%>
                <li>SubLink:  <%= Site.SubLink[j]%></li>
            <%}
        
        
        %>     
            </ul>
        </div>
        <%}
    }
    for(let i=0;i<AllSites.length;i++){
        printMainSite(AllSites[i]);
      
        for(let j=0;j<AllSites[i].subSite.length;j++){
           
            printSubSite(AllSites[i].subSite[j]);
            for(let k=0;k<AllSites[i].subSite[j].subSite.length;k++){
               
                printSubSiteSub(AllSites[i].subSite[j].subSite[k]);
                
            }
        }

    }
%>

</ul>

    </div>
</div>
<div class="panel-body"></div>
<div class="panel-footer"></div>
var fs = require('fs');
var path = require ('path');
var express= require('express');
var app = express();
var bodyParser = require('body-parser');

app.use('/public', express.static(path.join(__dirname, 'public')))
app.set('view engine', 'ejs')
app.set('views', path.join(__dirname,'/app_server/views'));
app.use(bodyParser.urlencoded({extended:true}));
app.use(bodyParser.json({extended:false}));

var routeMainpage = require('./app_server/routes/MainpageRoute')

app.use('/', routeMainpage)
app.listen(8000)